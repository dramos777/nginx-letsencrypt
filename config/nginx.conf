user                 nginx;
pid                  /var/run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;

events {
    multi_accept       on;
    worker_connections 65535;
}
 
# General configuration
http {
    charset                utf-8;
    sendfile               on;
    tcp_nopush             on;
    tcp_nodelay            on;
    server_tokens          off;
    log_not_found          off;
    types_hash_max_size    2048;
    types_hash_bucket_size 64;
    client_max_body_size   16M;

    # Logging
    access_log             /var/log/nginx/access.log;
    error_log              /var/log/nginx/error.log warn;

    resolver 1.1.1.1 valid=300s;
    resolver_timeout 10s;

# Disable strict transport security for now. You can uncomment the following
# line if you understand the implications.
#add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";

    # Load balancing HTTP configuration
    upstream my-app {
        server my-app:3000;
    }

    # NGINX server block for HTTP
    server {
        listen *:80;
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
	# If HTTPS is disabled for some reason, comment the redirect line below and uncomment the lines below.
	#        location / {
	#            proxy_pass http://my-app;
	#            proxy_set_header Host $host;
	#            proxy_set_header X-Real-IP $remote_addr;
	#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	#            proxy_set_header X-Forwarded-Proto $scheme;
	#        }

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    # NGINX server block for HTTPS
    server {
        listen 443 ssl;

    	# SSL
    	ssl_session_timeout    1d;
    	ssl_session_cache      shared:SSL:10m;
    	ssl_session_tickets    off;

    	# Diffie-Hellman parameter for DHE ciphersuites created by certs-create.sh script
    	ssl_dhparam            /etc/nginx/certs/dhparam.pem;

	# Choose how you want to generate your certificates: with letsencrypt-certs-generate.sh or certs-create.sh. Then comment or uncomment the lines below as needed:

	# Certificates generated by certs-create.sh script
#        ssl_certificate     /etc/nginx/certs/fullchain.pem;
#        ssl_certificate_key /etc/nginx/certs/privkey.pem;

	# Certificates generated by letsencrypt-certs-generate.sh
	ssl_certificate     /etc/letsencrypt/live/example.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem;

    	# Intermediate configuration
    	ssl_protocols          TLSv1.2 TLSv1.3;
    	ssl_prefer_server_ciphers on;
        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384";
    	ssl_ecdh_curve secp384r1;

    	# OCSP Stapling
    	ssl_stapling           on;
    	ssl_stapling_verify    on;

        location / {
            proxy_pass http://my-app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# The following are examples of how to use a TCP/UDP balancer.
#stream {
#    upstream graylog_syslog_tcp {
#        server graylog1:1514 max_fails=3 fail_timeout=30s;
#        server graylog2:1514 max_fails=3 fail_timeout=30s;
#    }
#
#    server {
#        listen 1514;
#        proxy_pass graylog_syslog_tcp;
#        proxy_timeout 3s;
#        error_log /var/log/nginx/graylog_syslog_tcp_error.log;
#    }
#
#    upstream graylog_syslog_udp {
#        server graylog1:1514 max_fails=3 fail_timeout=30s;
#        server graylog2:1514 max_fails=3 fail_timeout=30s;
#    }
#
#    server {
#        listen 1514 udp reuseport;
#        proxy_pass graylog_syslog_udp;
#        proxy_timeout 3s;
#        error_log /var/log/nginx/graylog_syslog_udp_error.log;
#    }
#
#    upstream graylog_gelf_tcp {
#        server graylog1:12201 max_fails=3 fail_timeout=30s;
#        server graylog2:12201 max_fails=3 fail_timeout=30s;
#    }
#
#    server {
#        listen 12201;
#        proxy_pass graylog_gelf_tcp;
#        proxy_timeout 3s;
#        error_log /var/log/nginx/graylog_gelf_tcp_error.log;
#    }
#
#    upstream graylog_gelf_udp {
#        server graylog1:12201 max_fails=3 fail_timeout=30s;
#        server graylog2:12201 max_fails=3 fail_timeout=30s;
#    }
#
#    server {
#        listen 12201 udp reuseport;
#        proxy_pass graylog_gelf_udp;
#        proxy_timeout 3s;
#        error_log /var/log/nginx/graylog_gelf_udp_error.log;
#    }
#
#    upstream graylog_beats_tcp_5044 {
#        server graylog1:5044 max_fails=3 fail_timeout=30s;
#        server graylog2:5044 max_fails=3 fail_timeout=30s;
#    }
#
#    server {
#        listen 5044;
#        proxy_pass graylog_beats_tcp_5044;
#        proxy_timeout 3s;
#        error_log /var/log/nginx/graylog_beats_tcp_5044_error.log;
#    }
#}
